<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zondy.mapgis.system.mapper.SysUserMapper">

    <resultMap type="SysUser" id="SysUserResult">
        <id property="userId" column="user_id"/>
        <result property="deptId" column="dept_id"/>
        <result property="userName" column="user_name"/>
        <result property="nickName" column="nick_name"/>
        <result property="email" column="email"/>
        <result property="phonenumber" column="phonenumber"/>
        <result property="sex" column="sex"/>
        <result property="avatar" column="avatar"/>
        <result property="password" column="password"/>
        <result property="status" column="status"/>
        <result property="delFlag" column="del_flag"/>
        <result property="loginIp" column="login_ip"/>
        <result property="loginDate" column="login_date"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
        <result property="remark" column="remark"/>
        <association property="dept" column="dept_id" javaType="SysDept" resultMap="deptResult"/>
        <collection property="roles" javaType="java.util.List" resultMap="RoleResult"/>
    </resultMap>

    <resultMap id="deptResult" type="SysDept">
        <id property="deptId" column="dept_id"/>
        <result property="parentId" column="parent_id"/>
        <result property="deptName" column="dept_name"/>
        <result property="ancestors" column="ancestors"/>
        <result property="orderNum" column="order_num"/>
        <result property="leader" column="leader"/>
        <result property="status" column="dept_status"/>
    </resultMap>

    <resultMap id="RoleResult" type="SysRole">
        <id property="roleId" column="role_id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleKey" column="role_key"/>
        <result property="roleSort" column="role_sort"/>
        <result property="dataScope" column="data_scope"/>
        <result property="status" column="role_status"/>
    </resultMap>

    <resultMap id="SysAuthUserResult" type="SysAuthUser">
        <id property="authId" column="auth_id"/>
        <result property="uuid" column="uuid"/>
        <result property="userId" column="user_id"/>
        <result property="loginName" column="login_name"/>
        <result property="userName" column="user_name"/>
        <result property="avatar" column="avatar"/>
        <result property="email" column="email"/>
        <result property="source" column="source"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

    <sql id="selectUserVo">
        select u.user_id,
               u.dept_id,
               u.user_name,
               u.nick_name,
               u.email,
               u.avatar,
               u.phonenumber,
               u.password,
               u.sex,
               u.status,
               u.del_flag,
               u.login_ip,
               u.login_date,
               u.create_by,
               u.create_time,
               u.remark,
               d.dept_id,
               d.parent_id,
               d.ancestors,
               d.dept_name,
               d.order_num,
               d.leader,
               d.status as dept_status,
               r.role_id,
               r.role_name,
               r.role_key,
               r.role_sort,
               r.data_scope,
               r.status as role_status
        from sys_user u
                 left join sys_dept d on u.dept_id = d.dept_id
                 left join sys_user_role ur on u.user_id = ur.user_id
                 left join sys_role r on r.role_id = ur.role_id
    </sql>

    <select id="selectUserList" parameterType="SysUser" resultMap="SysUserResult">
        select u.user_id, u.dept_id, u.nick_name, u.user_name, u.email, u.avatar, u.phonenumber, u.password, u.sex,
        u.status, u.del_flag, u.login_ip, u.login_date, u.create_by, u.create_time, u.remark, d.dept_name, d.leader from
        sys_user u
        left join sys_dept d on u.dept_id = d.dept_id
        where u.del_flag = '0'
        <if test="userId != null and userId != 0">
            AND u.user_id = #{userId}
        </if>
        <if test="userName != null and userName != ''">
            <bind name="userName_like" value="'%' + userName + '%'"/>
            AND u.user_name like #{userName_like}
        </if>
        <if test="status != null and status != ''">
            AND u.status = #{status}
        </if>
        <if test="phonenumber != null and phonenumber != ''">
            <bind name="phonenumber_like" value="'%' + phonenumber + '%'"/>
            AND u.phonenumber like #{phonenumber_like}
        </if>
        <if test="params.beginTime != null and params.beginTime != ''"><!-- 开始时间检索 -->
            <choose>
                <when test="_databaseId == 'sqlite'">
                    and create_time &gt;= #{params.beginTime}
                </when>
                <otherwise>
                    and date_format(create_time,'%y%m%d') &gt;= date_format(#{params.beginTime},'%y%m%d')
                </otherwise>
            </choose>
        </if>
        <if test="params.endTime != null and params.endTime != ''"><!-- 结束时间检索 -->
            <choose>
                <when test="_databaseId == 'sqlite'">
                    and create_time &lt;= #{params.endTime}
                </when>
                <otherwise>
                    and date_format(create_time,'%y%m%d') &lt;= date_format(#{params.endTime},'%y%m%d')
                </otherwise>
            </choose>
        </if>
        <if test="deptId != null and deptId != 0">
            <bind name="deptId_like" value="'%,' + deptId + ',%'"/>
            <bind name="deptId_like_right" value="'%' + deptId + ',%'"/>
            <bind name="deptId_like_left" value="'%,' + deptId + '%'"/>
            AND (u.dept_id = #{deptId} OR u.dept_id IN ( SELECT t.dept_id FROM sys_dept t WHERE ancestors like
            #{deptId_like} OR ancestors like #{deptId_like_right} OR ancestors like #{deptId_like_left} ))
        </if>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <select id="selectAllocatedList" parameterType="SysUser" resultMap="SysUserResult">
        select distinct u.user_id, u.dept_id, u.user_name, u.nick_name, u.email, u.phonenumber, u.status, u.create_time
        from sys_user u
        left join sys_dept d on u.dept_id = d.dept_id
        left join sys_user_role ur on u.user_id = ur.user_id
        left join sys_role r on r.role_id = ur.role_id
        where u.del_flag = '0' and r.role_id = #{roleId}
        <if test="userName != null and userName != ''">
            <bind name="userName_like" value="'%' + userName + '%'"/>
            AND u.user_name like #{userName_like}
        </if>
        <if test="phonenumber != null and phonenumber != ''">
            <bind name="phonenumber_like" value="'%' + phonenumber + '%'"/>
            AND u.phonenumber like #{phonenumber_like}
        </if>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <select id="selectUnallocatedList" parameterType="SysUser" resultMap="SysUserResult">
        select distinct u.user_id, u.dept_id, u.user_name, u.nick_name, u.email, u.phonenumber, u.status, u.create_time
        from sys_user u
        left join sys_dept d on u.dept_id = d.dept_id
        left join sys_user_role ur on u.user_id = ur.user_id
        left join sys_role r on r.role_id = ur.role_id
        where u.del_flag = '0' and (r.role_id != #{roleId} or r.role_id IS NULL)
        and u.user_id not in (select u.user_id from sys_user u inner join sys_user_role ur on u.user_id = ur.user_id and
        ur.role_id = #{roleId})
        <if test="userName != null and userName != ''">
            <bind name="userName_like" value="'%' + userName + '%'"/>
            AND u.user_name like #{userName_like}
        </if>
        <if test="phonenumber != null and phonenumber != ''">
            <bind name="phonenumber_like" value="'%' + phonenumber + '%'"/>
            AND u.phonenumber like #{phonenumber_like}
        </if>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
    </select>

    <select id="selectUserByUserName" parameterType="String" resultMap="SysUserResult">
        <include refid="selectUserVo"/>
        where u.user_name = #{userName}
    </select>

    <select id="selectUserById" parameterType="Long" resultMap="SysUserResult">
        <include refid="selectUserVo"/>
        where u.user_id = #{userId}
    </select>

    <select id="checkUserNameUnique" parameterType="String" resultType="int">
        select count(1)
        from sys_user
        where user_name = #{userName}
        limit 1
    </select>

    <select id="checkPhoneUnique" parameterType="String" resultMap="SysUserResult">
        select user_id, phonenumber
        from sys_user
        where phonenumber = #{phonenumber}
        limit 1
    </select>

    <select id="checkEmailUnique" parameterType="String" resultMap="SysUserResult">
        select user_id, email
        from sys_user
        where email = #{email}
        limit 1
    </select>

    <insert id="insertUser" parameterType="SysUser" useGeneratedKeys="true" keyProperty="userId">
        insert into sys_user(
        <if test="userId != null and userId != 0">user_id,</if>
        <if test="deptId != null and deptId != 0">dept_id,</if>
        <if test="userName != null and userName != ''">user_name,</if>
        <if test="nickName != null and nickName != ''">nick_name,</if>
        <if test="email != null and email != ''">email,</if>
        <if test="avatar != null and avatar != ''">avatar,</if>
        <if test="phonenumber != null and phonenumber != ''">phonenumber,</if>
        <if test="sex != null and sex != ''">sex,</if>
        <if test="password != null and password != ''">password,</if>
        <if test="status != null and status != ''">status,</if>
        <if test="createBy != null and createBy != ''">create_by,</if>
        <if test="remark != null and remark != ''">remark,</if>
        create_time
        )values(
        <if test="userId != null and userId != ''">#{userId},</if>
        <if test="deptId != null and deptId != ''">#{deptId},</if>
        <if test="userName != null and userName != ''">#{userName},</if>
        <if test="nickName != null and nickName != ''">#{nickName},</if>
        <if test="email != null and email != ''">#{email},</if>
        <if test="avatar != null and avatar != ''">#{avatar},</if>
        <if test="phonenumber != null and phonenumber != ''">#{phonenumber},</if>
        <if test="sex != null and sex != ''">#{sex},</if>
        <if test="password != null and password != ''">#{password},</if>
        <if test="status != null and status != ''">#{status},</if>
        <if test="createBy != null and createBy != ''">#{createBy},</if>
        <if test="remark != null and remark != ''">#{remark},</if>
        <choose>
            <when test="_databaseId == 'sqlite'">
                (datetime(CURRENT_TIMESTAMP,'localtime'))
            </when>
            <otherwise>
                sysdate()
            </otherwise>
        </choose>
        )
    </insert>

    <update id="updateUser" parameterType="SysUser">
        update sys_user
        <set>
            <if test="deptId != null and deptId != 0">dept_id = #{deptId},</if>
            <if test="userName != null and userName != ''">user_name = #{userName},</if>
            <if test="nickName != null and nickName != ''">nick_name = #{nickName},</if>
            <if test="email != null ">email = #{email},</if>
            <if test="phonenumber != null ">phonenumber = #{phonenumber},</if>
            <if test="sex != null and sex != ''">sex = #{sex},</if>
            <if test="avatar != null and avatar != ''">avatar = #{avatar},</if>
            <if test="password != null and password != ''">password = #{password},</if>
            <if test="status != null and status != ''">status = #{status},</if>
            <if test="loginIp != null and loginIp != ''">login_ip = #{loginIp},</if>
            <if test="loginDate != null">login_date = #{loginDate},</if>
            <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
            <if test="remark != null">remark = #{remark},</if>
            <choose>
                <when test="_databaseId == 'sqlite'">
                    update_time = (datetime(CURRENT_TIMESTAMP,'localtime'))
                </when>
                <otherwise>
                    update_time = sysdate()
                </otherwise>
            </choose>
        </set>
        where user_id = #{userId}
    </update>

    <update id="updateUserStatus" parameterType="SysUser">
        update sys_user
        set status = #{status}
        where user_id = #{userId}
    </update>

    <update id="updateUserAvatar" parameterType="SysUser">
        update sys_user
        set avatar = #{avatar}
        where user_name = #{userName}
    </update>

    <update id="resetUserPwd" parameterType="SysUser">
        update sys_user
        set password = #{password}
        where user_name = #{userName}
    </update>

    <delete id="deleteUserById" parameterType="Long">
        update sys_user
        set del_flag = '2'
        where user_id = #{userId}
    </delete>

    <delete id="deleteUserByIds" parameterType="Long">
        update sys_user set del_flag = '2' where user_id in
        <foreach collection="array" item="userId" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>

    <select id="selectAuthUserList" parameterType="SysAuthUser" resultMap="SysAuthUserResult">
        select auth_id,
        uuid,
        user_id,
        login_name,
        user_name,
        avatar,
        email,
        source,
        create_time
        from sys_auth_user
        <where>
            <if test="userId != null and userId != 0">
                AND user_id = #{userId}
            </if>
            <if test="uuid != null and uuid != ''">
                <bind name="uuid_like" value="'%' + uuid + '%'"/>
                AND uuid like #{uuid_like}
            </if>
            <if test="loginName != null and loginName != ''">
                <bind name="loginName_like" value="'%' + loginName + '%'"/>
                AND login_name like #{loginName_like}
            </if>
            <if test="userName != null and userName != ''">
                <bind name="userName_like" value="'%' + userName + '%'"/>
                AND user_name like #{userName_like}
            </if>
            <if test="email != null and email != ''">
                <bind name="email_like" value="'%' + email + '%'"/>
                AND email like #{email_like}
            </if>
            <if test="source != null and source != ''">
                <bind name="source_like" value="'%' + source + '%'"/>
                AND source like #{source_like}
            </if>
        </where>
    </select>

    <select id="selectAuthUserListByUserId" parameterType="Long" resultMap="SysAuthUserResult">
        select auth_id,
               uuid,
               user_id,
               login_name,
               user_name,
               avatar,
               email,
               source,
               create_time
        from sys_auth_user
        where user_id = #{userId}
    </select>

    <select id="selectUserByAuthUuid" parameterType="String" resultMap="SysUserResult">
        select b.user_id as user_id, b.user_name as user_name
        from sys_auth_user a
                 left join sys_user b on a.user_id = b.user_id
        where a.uuid = #{uuid}
          and b.del_flag = '0'
    </select>

    <select id="checkAuthUser" parameterType="SysAuthUser" resultType="int">
        select count(1)
        from sys_auth_user
        where user_id = #{userId}
          and source = #{source}
        limit 1
    </select>

    <insert id="insertAuthUser" parameterType="SysAuthUser">
        insert into sys_auth_user(
        <if test="uuid != null and uuid != ''">uuid,</if>
        <if test="userId != null and userId != 0">user_id,</if>
        <if test="loginName != null and loginName != ''">login_name,</if>
        <if test="userName != null and userName != ''">user_name,</if>
        <if test="avatar != null and avatar != ''">avatar,</if>
        <if test="email != null and email != ''">email,</if>
        <if test="source != null and source != ''">source,</if>
        create_time
        )values(
        <if test="uuid != null and uuid != ''">#{uuid},</if>
        <if test="userId != null and userId != 0">#{userId},</if>
        <if test="loginName != null and loginName != ''">#{loginName},</if>
        <if test="userName != null and userName != ''">#{userName},</if>
        <if test="avatar != null and avatar != ''">#{avatar},</if>
        <if test="email != null and email != ''">#{email},</if>
        <if test="source != null and source != ''">#{source},</if>
        <choose>
            <when test="_databaseId == 'sqlite'">
                (datetime(CURRENT_TIMESTAMP,'localtime'))
            </when>
            <otherwise>
                sysdate()
            </otherwise>
        </choose>
        )
    </insert>

    <update id="updateAuthUser" parameterType="SysAuthUser">
        update sys_auth_user
        <set>
            <if test="userId != null and userId != 0">user_id = #{userId},</if>
            <if test="loginName != null and loginName != ''">login_name = #{loginName},</if>
            <if test="userName != null and userName != ''">user_name = #{userName},</if>
            <if test="avatar != null ">avatar = #{avatar},</if>
            <if test="email != null ">email = #{email},</if>
        </set>
        where auth_id = #{authId}
    </update>

    <delete id="deleteAuthUser" parameterType="Long">
        delete
        from sys_auth_user
        where auth_id = #{authId}
    </delete>
</mapper> 